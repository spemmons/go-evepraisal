// Code generated by go-bindata.
// sources:
// resources/static/favicon.ico
// resources/static/style.css
// resources/static/thirdparty/bootstrap-3.3.7/css/bootstrap-theme.css
// resources/static/thirdparty/bootstrap-3.3.7/css/bootstrap-theme.css.map
// resources/static/thirdparty/bootstrap-3.3.7/css/bootstrap-theme.min.css
// resources/static/thirdparty/bootstrap-3.3.7/css/bootstrap-theme.min.css.map
// resources/static/thirdparty/bootstrap-3.3.7/css/bootstrap.css
// resources/static/thirdparty/bootstrap-3.3.7/css/bootstrap.css.map
// resources/static/thirdparty/bootstrap-3.3.7/css/bootstrap.min.css
// resources/static/thirdparty/bootstrap-3.3.7/css/bootstrap.min.css.map
// resources/static/thirdparty/bootstrap-3.3.7/css/cyborg.css
// resources/static/thirdparty/bootstrap-3.3.7/css/cyborg.min.css
// resources/static/thirdparty/bootstrap-3.3.7/fonts/glyphicons-halflings-regular.eot
// resources/static/thirdparty/bootstrap-3.3.7/fonts/glyphicons-halflings-regular.svg
// resources/static/thirdparty/bootstrap-3.3.7/fonts/glyphicons-halflings-regular.ttf
// resources/static/thirdparty/bootstrap-3.3.7/fonts/glyphicons-halflings-regular.woff
// resources/static/thirdparty/bootstrap-3.3.7/fonts/glyphicons-halflings-regular.woff2
// resources/static/thirdparty/bootstrap-3.3.7/js/bootstrap.js
// resources/static/thirdparty/bootstrap-3.3.7/js/bootstrap.min.js
// resources/static/thirdparty/bootstrap-3.3.7/js/npm.js
// resources/static/thirdparty/jquery-3.2.1.min.js
// resources/static/thirdparty/jquery.tablesorter.js
// resources/static/thirdparty/jquery.tablesorter.min.js
// resources/static/thirdparty/typeahead.js/bloodhound.js
// resources/static/thirdparty/typeahead.js/bloodhound.min.js
// resources/static/thirdparty/typeahead.js/typeahead.bundle.js
// resources/static/thirdparty/typeahead.js/typeahead.bundle.min.js
// resources/static/thirdparty/typeahead.js/typeahead.jquery.js
// resources/static/thirdparty/typeahead.js/typeahead.jquery.min.js
// resources/templates/_buyback_table.html
// resources/templates/_layout.html
// resources/templates/_paste-panel.html
// resources/templates/_view_item_ccp.html
// resources/templates/_view_item_component.html
// resources/templates/_view_item_header.html
// resources/templates/_view_item_market.html
// resources/templates/_view_item_market_table.html
// resources/templates/_view_item_market_universe.html
// resources/templates/about.html
// resources/templates/api.html
// resources/templates/appraisal.html
// resources/templates/error.html
// resources/templates/latest.html
// resources/templates/legal.html
// resources/templates/main.html
// resources/templates/search.html
// resources/templates/user_history.html
// resources/templates/view_item.html
// DO NOT EDIT!

package web

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// staticFaviconIco reads file data from disk. It returns an error on failure.
func staticFaviconIco() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/favicon.ico"
	name := "static/favicon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticStyleCss reads file data from disk. It returns an error on failure.
func staticStyleCss() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/style.css"
	name := "static/style.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyBootstrap337CssBootstrapThemeCss reads file data from disk. It returns an error on failure.
func staticThirdpartyBootstrap337CssBootstrapThemeCss() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/bootstrap-3.3.7/css/bootstrap-theme.css"
	name := "static/thirdparty/bootstrap-3.3.7/css/bootstrap-theme.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyBootstrap337CssBootstrapThemeCssMap reads file data from disk. It returns an error on failure.
func staticThirdpartyBootstrap337CssBootstrapThemeCssMap() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/bootstrap-3.3.7/css/bootstrap-theme.css.map"
	name := "static/thirdparty/bootstrap-3.3.7/css/bootstrap-theme.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyBootstrap337CssBootstrapThemeMinCss reads file data from disk. It returns an error on failure.
func staticThirdpartyBootstrap337CssBootstrapThemeMinCss() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/bootstrap-3.3.7/css/bootstrap-theme.min.css"
	name := "static/thirdparty/bootstrap-3.3.7/css/bootstrap-theme.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyBootstrap337CssBootstrapThemeMinCssMap reads file data from disk. It returns an error on failure.
func staticThirdpartyBootstrap337CssBootstrapThemeMinCssMap() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/bootstrap-3.3.7/css/bootstrap-theme.min.css.map"
	name := "static/thirdparty/bootstrap-3.3.7/css/bootstrap-theme.min.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyBootstrap337CssBootstrapCss reads file data from disk. It returns an error on failure.
func staticThirdpartyBootstrap337CssBootstrapCss() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/bootstrap-3.3.7/css/bootstrap.css"
	name := "static/thirdparty/bootstrap-3.3.7/css/bootstrap.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyBootstrap337CssBootstrapCssMap reads file data from disk. It returns an error on failure.
func staticThirdpartyBootstrap337CssBootstrapCssMap() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/bootstrap-3.3.7/css/bootstrap.css.map"
	name := "static/thirdparty/bootstrap-3.3.7/css/bootstrap.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyBootstrap337CssBootstrapMinCss reads file data from disk. It returns an error on failure.
func staticThirdpartyBootstrap337CssBootstrapMinCss() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/bootstrap-3.3.7/css/bootstrap.min.css"
	name := "static/thirdparty/bootstrap-3.3.7/css/bootstrap.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyBootstrap337CssBootstrapMinCssMap reads file data from disk. It returns an error on failure.
func staticThirdpartyBootstrap337CssBootstrapMinCssMap() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/bootstrap-3.3.7/css/bootstrap.min.css.map"
	name := "static/thirdparty/bootstrap-3.3.7/css/bootstrap.min.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyBootstrap337CssCyborgCss reads file data from disk. It returns an error on failure.
func staticThirdpartyBootstrap337CssCyborgCss() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/bootstrap-3.3.7/css/cyborg.css"
	name := "static/thirdparty/bootstrap-3.3.7/css/cyborg.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyBootstrap337CssCyborgMinCss reads file data from disk. It returns an error on failure.
func staticThirdpartyBootstrap337CssCyborgMinCss() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/bootstrap-3.3.7/css/cyborg.min.css"
	name := "static/thirdparty/bootstrap-3.3.7/css/cyborg.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyBootstrap337FontsGlyphiconsHalflingsRegularEot reads file data from disk. It returns an error on failure.
func staticThirdpartyBootstrap337FontsGlyphiconsHalflingsRegularEot() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/bootstrap-3.3.7/fonts/glyphicons-halflings-regular.eot"
	name := "static/thirdparty/bootstrap-3.3.7/fonts/glyphicons-halflings-regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyBootstrap337FontsGlyphiconsHalflingsRegularSvg reads file data from disk. It returns an error on failure.
func staticThirdpartyBootstrap337FontsGlyphiconsHalflingsRegularSvg() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/bootstrap-3.3.7/fonts/glyphicons-halflings-regular.svg"
	name := "static/thirdparty/bootstrap-3.3.7/fonts/glyphicons-halflings-regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyBootstrap337FontsGlyphiconsHalflingsRegularTtf reads file data from disk. It returns an error on failure.
func staticThirdpartyBootstrap337FontsGlyphiconsHalflingsRegularTtf() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/bootstrap-3.3.7/fonts/glyphicons-halflings-regular.ttf"
	name := "static/thirdparty/bootstrap-3.3.7/fonts/glyphicons-halflings-regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyBootstrap337FontsGlyphiconsHalflingsRegularWoff reads file data from disk. It returns an error on failure.
func staticThirdpartyBootstrap337FontsGlyphiconsHalflingsRegularWoff() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/bootstrap-3.3.7/fonts/glyphicons-halflings-regular.woff"
	name := "static/thirdparty/bootstrap-3.3.7/fonts/glyphicons-halflings-regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyBootstrap337FontsGlyphiconsHalflingsRegularWoff2 reads file data from disk. It returns an error on failure.
func staticThirdpartyBootstrap337FontsGlyphiconsHalflingsRegularWoff2() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/bootstrap-3.3.7/fonts/glyphicons-halflings-regular.woff2"
	name := "static/thirdparty/bootstrap-3.3.7/fonts/glyphicons-halflings-regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyBootstrap337JsBootstrapJs reads file data from disk. It returns an error on failure.
func staticThirdpartyBootstrap337JsBootstrapJs() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/bootstrap-3.3.7/js/bootstrap.js"
	name := "static/thirdparty/bootstrap-3.3.7/js/bootstrap.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyBootstrap337JsBootstrapMinJs reads file data from disk. It returns an error on failure.
func staticThirdpartyBootstrap337JsBootstrapMinJs() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/bootstrap-3.3.7/js/bootstrap.min.js"
	name := "static/thirdparty/bootstrap-3.3.7/js/bootstrap.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyBootstrap337JsNpmJs reads file data from disk. It returns an error on failure.
func staticThirdpartyBootstrap337JsNpmJs() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/bootstrap-3.3.7/js/npm.js"
	name := "static/thirdparty/bootstrap-3.3.7/js/npm.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyJquery321MinJs reads file data from disk. It returns an error on failure.
func staticThirdpartyJquery321MinJs() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/jquery-3.2.1.min.js"
	name := "static/thirdparty/jquery-3.2.1.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyJqueryTablesorterJs reads file data from disk. It returns an error on failure.
func staticThirdpartyJqueryTablesorterJs() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/jquery.tablesorter.js"
	name := "static/thirdparty/jquery.tablesorter.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyJqueryTablesorterMinJs reads file data from disk. It returns an error on failure.
func staticThirdpartyJqueryTablesorterMinJs() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/jquery.tablesorter.min.js"
	name := "static/thirdparty/jquery.tablesorter.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyTypeaheadJsBloodhoundJs reads file data from disk. It returns an error on failure.
func staticThirdpartyTypeaheadJsBloodhoundJs() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/typeahead.js/bloodhound.js"
	name := "static/thirdparty/typeahead.js/bloodhound.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyTypeaheadJsBloodhoundMinJs reads file data from disk. It returns an error on failure.
func staticThirdpartyTypeaheadJsBloodhoundMinJs() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/typeahead.js/bloodhound.min.js"
	name := "static/thirdparty/typeahead.js/bloodhound.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyTypeaheadJsTypeaheadBundleJs reads file data from disk. It returns an error on failure.
func staticThirdpartyTypeaheadJsTypeaheadBundleJs() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/typeahead.js/typeahead.bundle.js"
	name := "static/thirdparty/typeahead.js/typeahead.bundle.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyTypeaheadJsTypeaheadBundleMinJs reads file data from disk. It returns an error on failure.
func staticThirdpartyTypeaheadJsTypeaheadBundleMinJs() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/typeahead.js/typeahead.bundle.min.js"
	name := "static/thirdparty/typeahead.js/typeahead.bundle.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyTypeaheadJsTypeaheadJqueryJs reads file data from disk. It returns an error on failure.
func staticThirdpartyTypeaheadJsTypeaheadJqueryJs() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/typeahead.js/typeahead.jquery.js"
	name := "static/thirdparty/typeahead.js/typeahead.jquery.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticThirdpartyTypeaheadJsTypeaheadJqueryMinJs reads file data from disk. It returns an error on failure.
func staticThirdpartyTypeaheadJsTypeaheadJqueryMinJs() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/static/thirdparty/typeahead.js/typeahead.jquery.min.js"
	name := "static/thirdparty/typeahead.js/typeahead.jquery.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templates_buyback_tableHtml reads file data from disk. It returns an error on failure.
func templates_buyback_tableHtml() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/templates/_buyback_table.html"
	name := "templates/_buyback_table.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templates_layoutHtml reads file data from disk. It returns an error on failure.
func templates_layoutHtml() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/templates/_layout.html"
	name := "templates/_layout.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templates_pastePanelHtml reads file data from disk. It returns an error on failure.
func templates_pastePanelHtml() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/templates/_paste-panel.html"
	name := "templates/_paste-panel.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templates_view_item_ccpHtml reads file data from disk. It returns an error on failure.
func templates_view_item_ccpHtml() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/templates/_view_item_ccp.html"
	name := "templates/_view_item_ccp.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templates_view_item_componentHtml reads file data from disk. It returns an error on failure.
func templates_view_item_componentHtml() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/templates/_view_item_component.html"
	name := "templates/_view_item_component.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templates_view_item_headerHtml reads file data from disk. It returns an error on failure.
func templates_view_item_headerHtml() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/templates/_view_item_header.html"
	name := "templates/_view_item_header.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templates_view_item_marketHtml reads file data from disk. It returns an error on failure.
func templates_view_item_marketHtml() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/templates/_view_item_market.html"
	name := "templates/_view_item_market.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templates_view_item_market_tableHtml reads file data from disk. It returns an error on failure.
func templates_view_item_market_tableHtml() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/templates/_view_item_market_table.html"
	name := "templates/_view_item_market_table.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templates_view_item_market_universeHtml reads file data from disk. It returns an error on failure.
func templates_view_item_market_universeHtml() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/templates/_view_item_market_universe.html"
	name := "templates/_view_item_market_universe.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesAboutHtml reads file data from disk. It returns an error on failure.
func templatesAboutHtml() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/templates/about.html"
	name := "templates/about.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesApiHtml reads file data from disk. It returns an error on failure.
func templatesApiHtml() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/templates/api.html"
	name := "templates/api.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesAppraisalHtml reads file data from disk. It returns an error on failure.
func templatesAppraisalHtml() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/templates/appraisal.html"
	name := "templates/appraisal.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesErrorHtml reads file data from disk. It returns an error on failure.
func templatesErrorHtml() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/templates/error.html"
	name := "templates/error.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesLatestHtml reads file data from disk. It returns an error on failure.
func templatesLatestHtml() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/templates/latest.html"
	name := "templates/latest.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesLegalHtml reads file data from disk. It returns an error on failure.
func templatesLegalHtml() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/templates/legal.html"
	name := "templates/legal.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesMainHtml reads file data from disk. It returns an error on failure.
func templatesMainHtml() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/templates/main.html"
	name := "templates/main.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesSearchHtml reads file data from disk. It returns an error on failure.
func templatesSearchHtml() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/templates/search.html"
	name := "templates/search.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesUser_historyHtml reads file data from disk. It returns an error on failure.
func templatesUser_historyHtml() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/templates/user_history.html"
	name := "templates/user_history.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesView_itemHtml reads file data from disk. It returns an error on failure.
func templatesView_itemHtml() (*asset, error) {
	path := "/Users/steveemmons/Personal/go/src/github.com/evepraisal/go-evepraisal/web/resources/templates/view_item.html"
	name := "templates/view_item.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/favicon.ico": staticFaviconIco,
	"static/style.css": staticStyleCss,
	"static/thirdparty/bootstrap-3.3.7/css/bootstrap-theme.css": staticThirdpartyBootstrap337CssBootstrapThemeCss,
	"static/thirdparty/bootstrap-3.3.7/css/bootstrap-theme.css.map": staticThirdpartyBootstrap337CssBootstrapThemeCssMap,
	"static/thirdparty/bootstrap-3.3.7/css/bootstrap-theme.min.css": staticThirdpartyBootstrap337CssBootstrapThemeMinCss,
	"static/thirdparty/bootstrap-3.3.7/css/bootstrap-theme.min.css.map": staticThirdpartyBootstrap337CssBootstrapThemeMinCssMap,
	"static/thirdparty/bootstrap-3.3.7/css/bootstrap.css": staticThirdpartyBootstrap337CssBootstrapCss,
	"static/thirdparty/bootstrap-3.3.7/css/bootstrap.css.map": staticThirdpartyBootstrap337CssBootstrapCssMap,
	"static/thirdparty/bootstrap-3.3.7/css/bootstrap.min.css": staticThirdpartyBootstrap337CssBootstrapMinCss,
	"static/thirdparty/bootstrap-3.3.7/css/bootstrap.min.css.map": staticThirdpartyBootstrap337CssBootstrapMinCssMap,
	"static/thirdparty/bootstrap-3.3.7/css/cyborg.css": staticThirdpartyBootstrap337CssCyborgCss,
	"static/thirdparty/bootstrap-3.3.7/css/cyborg.min.css": staticThirdpartyBootstrap337CssCyborgMinCss,
	"static/thirdparty/bootstrap-3.3.7/fonts/glyphicons-halflings-regular.eot": staticThirdpartyBootstrap337FontsGlyphiconsHalflingsRegularEot,
	"static/thirdparty/bootstrap-3.3.7/fonts/glyphicons-halflings-regular.svg": staticThirdpartyBootstrap337FontsGlyphiconsHalflingsRegularSvg,
	"static/thirdparty/bootstrap-3.3.7/fonts/glyphicons-halflings-regular.ttf": staticThirdpartyBootstrap337FontsGlyphiconsHalflingsRegularTtf,
	"static/thirdparty/bootstrap-3.3.7/fonts/glyphicons-halflings-regular.woff": staticThirdpartyBootstrap337FontsGlyphiconsHalflingsRegularWoff,
	"static/thirdparty/bootstrap-3.3.7/fonts/glyphicons-halflings-regular.woff2": staticThirdpartyBootstrap337FontsGlyphiconsHalflingsRegularWoff2,
	"static/thirdparty/bootstrap-3.3.7/js/bootstrap.js": staticThirdpartyBootstrap337JsBootstrapJs,
	"static/thirdparty/bootstrap-3.3.7/js/bootstrap.min.js": staticThirdpartyBootstrap337JsBootstrapMinJs,
	"static/thirdparty/bootstrap-3.3.7/js/npm.js": staticThirdpartyBootstrap337JsNpmJs,
	"static/thirdparty/jquery-3.2.1.min.js": staticThirdpartyJquery321MinJs,
	"static/thirdparty/jquery.tablesorter.js": staticThirdpartyJqueryTablesorterJs,
	"static/thirdparty/jquery.tablesorter.min.js": staticThirdpartyJqueryTablesorterMinJs,
	"static/thirdparty/typeahead.js/bloodhound.js": staticThirdpartyTypeaheadJsBloodhoundJs,
	"static/thirdparty/typeahead.js/bloodhound.min.js": staticThirdpartyTypeaheadJsBloodhoundMinJs,
	"static/thirdparty/typeahead.js/typeahead.bundle.js": staticThirdpartyTypeaheadJsTypeaheadBundleJs,
	"static/thirdparty/typeahead.js/typeahead.bundle.min.js": staticThirdpartyTypeaheadJsTypeaheadBundleMinJs,
	"static/thirdparty/typeahead.js/typeahead.jquery.js": staticThirdpartyTypeaheadJsTypeaheadJqueryJs,
	"static/thirdparty/typeahead.js/typeahead.jquery.min.js": staticThirdpartyTypeaheadJsTypeaheadJqueryMinJs,
	"templates/_buyback_table.html": templates_buyback_tableHtml,
	"templates/_layout.html": templates_layoutHtml,
	"templates/_paste-panel.html": templates_pastePanelHtml,
	"templates/_view_item_ccp.html": templates_view_item_ccpHtml,
	"templates/_view_item_component.html": templates_view_item_componentHtml,
	"templates/_view_item_header.html": templates_view_item_headerHtml,
	"templates/_view_item_market.html": templates_view_item_marketHtml,
	"templates/_view_item_market_table.html": templates_view_item_market_tableHtml,
	"templates/_view_item_market_universe.html": templates_view_item_market_universeHtml,
	"templates/about.html": templatesAboutHtml,
	"templates/api.html": templatesApiHtml,
	"templates/appraisal.html": templatesAppraisalHtml,
	"templates/error.html": templatesErrorHtml,
	"templates/latest.html": templatesLatestHtml,
	"templates/legal.html": templatesLegalHtml,
	"templates/main.html": templatesMainHtml,
	"templates/search.html": templatesSearchHtml,
	"templates/user_history.html": templatesUser_historyHtml,
	"templates/view_item.html": templatesView_itemHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"favicon.ico": &bintree{staticFaviconIco, map[string]*bintree{}},
		"style.css": &bintree{staticStyleCss, map[string]*bintree{}},
		"thirdparty": &bintree{nil, map[string]*bintree{
			"bootstrap-3.3.7": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"bootstrap-theme.css": &bintree{staticThirdpartyBootstrap337CssBootstrapThemeCss, map[string]*bintree{}},
					"bootstrap-theme.css.map": &bintree{staticThirdpartyBootstrap337CssBootstrapThemeCssMap, map[string]*bintree{}},
					"bootstrap-theme.min.css": &bintree{staticThirdpartyBootstrap337CssBootstrapThemeMinCss, map[string]*bintree{}},
					"bootstrap-theme.min.css.map": &bintree{staticThirdpartyBootstrap337CssBootstrapThemeMinCssMap, map[string]*bintree{}},
					"bootstrap.css": &bintree{staticThirdpartyBootstrap337CssBootstrapCss, map[string]*bintree{}},
					"bootstrap.css.map": &bintree{staticThirdpartyBootstrap337CssBootstrapCssMap, map[string]*bintree{}},
					"bootstrap.min.css": &bintree{staticThirdpartyBootstrap337CssBootstrapMinCss, map[string]*bintree{}},
					"bootstrap.min.css.map": &bintree{staticThirdpartyBootstrap337CssBootstrapMinCssMap, map[string]*bintree{}},
					"cyborg.css": &bintree{staticThirdpartyBootstrap337CssCyborgCss, map[string]*bintree{}},
					"cyborg.min.css": &bintree{staticThirdpartyBootstrap337CssCyborgMinCss, map[string]*bintree{}},
				}},
				"fonts": &bintree{nil, map[string]*bintree{
					"glyphicons-halflings-regular.eot": &bintree{staticThirdpartyBootstrap337FontsGlyphiconsHalflingsRegularEot, map[string]*bintree{}},
					"glyphicons-halflings-regular.svg": &bintree{staticThirdpartyBootstrap337FontsGlyphiconsHalflingsRegularSvg, map[string]*bintree{}},
					"glyphicons-halflings-regular.ttf": &bintree{staticThirdpartyBootstrap337FontsGlyphiconsHalflingsRegularTtf, map[string]*bintree{}},
					"glyphicons-halflings-regular.woff": &bintree{staticThirdpartyBootstrap337FontsGlyphiconsHalflingsRegularWoff, map[string]*bintree{}},
					"glyphicons-halflings-regular.woff2": &bintree{staticThirdpartyBootstrap337FontsGlyphiconsHalflingsRegularWoff2, map[string]*bintree{}},
				}},
				"js": &bintree{nil, map[string]*bintree{
					"bootstrap.js": &bintree{staticThirdpartyBootstrap337JsBootstrapJs, map[string]*bintree{}},
					"bootstrap.min.js": &bintree{staticThirdpartyBootstrap337JsBootstrapMinJs, map[string]*bintree{}},
					"npm.js": &bintree{staticThirdpartyBootstrap337JsNpmJs, map[string]*bintree{}},
				}},
			}},
			"jquery-3.2.1.min.js": &bintree{staticThirdpartyJquery321MinJs, map[string]*bintree{}},
			"jquery.tablesorter.js": &bintree{staticThirdpartyJqueryTablesorterJs, map[string]*bintree{}},
			"jquery.tablesorter.min.js": &bintree{staticThirdpartyJqueryTablesorterMinJs, map[string]*bintree{}},
			"typeahead.js": &bintree{nil, map[string]*bintree{
				"bloodhound.js": &bintree{staticThirdpartyTypeaheadJsBloodhoundJs, map[string]*bintree{}},
				"bloodhound.min.js": &bintree{staticThirdpartyTypeaheadJsBloodhoundMinJs, map[string]*bintree{}},
				"typeahead.bundle.js": &bintree{staticThirdpartyTypeaheadJsTypeaheadBundleJs, map[string]*bintree{}},
				"typeahead.bundle.min.js": &bintree{staticThirdpartyTypeaheadJsTypeaheadBundleMinJs, map[string]*bintree{}},
				"typeahead.jquery.js": &bintree{staticThirdpartyTypeaheadJsTypeaheadJqueryJs, map[string]*bintree{}},
				"typeahead.jquery.min.js": &bintree{staticThirdpartyTypeaheadJsTypeaheadJqueryMinJs, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"_buyback_table.html": &bintree{templates_buyback_tableHtml, map[string]*bintree{}},
		"_layout.html": &bintree{templates_layoutHtml, map[string]*bintree{}},
		"_paste-panel.html": &bintree{templates_pastePanelHtml, map[string]*bintree{}},
		"_view_item_ccp.html": &bintree{templates_view_item_ccpHtml, map[string]*bintree{}},
		"_view_item_component.html": &bintree{templates_view_item_componentHtml, map[string]*bintree{}},
		"_view_item_header.html": &bintree{templates_view_item_headerHtml, map[string]*bintree{}},
		"_view_item_market.html": &bintree{templates_view_item_marketHtml, map[string]*bintree{}},
		"_view_item_market_table.html": &bintree{templates_view_item_market_tableHtml, map[string]*bintree{}},
		"_view_item_market_universe.html": &bintree{templates_view_item_market_universeHtml, map[string]*bintree{}},
		"about.html": &bintree{templatesAboutHtml, map[string]*bintree{}},
		"api.html": &bintree{templatesApiHtml, map[string]*bintree{}},
		"appraisal.html": &bintree{templatesAppraisalHtml, map[string]*bintree{}},
		"error.html": &bintree{templatesErrorHtml, map[string]*bintree{}},
		"latest.html": &bintree{templatesLatestHtml, map[string]*bintree{}},
		"legal.html": &bintree{templatesLegalHtml, map[string]*bintree{}},
		"main.html": &bintree{templatesMainHtml, map[string]*bintree{}},
		"search.html": &bintree{templatesSearchHtml, map[string]*bintree{}},
		"user_history.html": &bintree{templatesUser_historyHtml, map[string]*bintree{}},
		"view_item.html": &bintree{templatesView_itemHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

